# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import chord_pb2 as chord__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in chord_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ChordNodeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FindSuccessor = channel.unary_unary(
                '/chord.ChordNode/FindSuccessor',
                request_serializer=chord__pb2.FindSuccessorRequest.SerializeToString,
                response_deserializer=chord__pb2.FindSuccessorResponse.FromString,
                _registered_method=True)
        self.GetPredecessor = channel.unary_unary(
                '/chord.ChordNode/GetPredecessor',
                request_serializer=chord__pb2.Void.SerializeToString,
                response_deserializer=chord__pb2.GetPredecessorResponse.FromString,
                _registered_method=True)
        self.GetSuccessor = channel.unary_unary(
                '/chord.ChordNode/GetSuccessor',
                request_serializer=chord__pb2.Void.SerializeToString,
                response_deserializer=chord__pb2.GetSuccessorResponse.FromString,
                _registered_method=True)
        self.Notify = channel.unary_unary(
                '/chord.ChordNode/Notify',
                request_serializer=chord__pb2.NotifyRequest.SerializeToString,
                response_deserializer=chord__pb2.Void.FromString,
                _registered_method=True)
        self.TransferKeys = channel.unary_unary(
                '/chord.ChordNode/TransferKeys',
                request_serializer=chord__pb2.TransferKeysRequest.SerializeToString,
                response_deserializer=chord__pb2.Void.FromString,
                _registered_method=True)
        self.GetKeys = channel.unary_unary(
                '/chord.ChordNode/GetKeys',
                request_serializer=chord__pb2.GetKeysRequest.SerializeToString,
                response_deserializer=chord__pb2.TransferKeysResponse.FromString,
                _registered_method=True)
        self.Ping = channel.unary_unary(
                '/chord.ChordNode/Ping',
                request_serializer=chord__pb2.Void.SerializeToString,
                response_deserializer=chord__pb2.PingResponse.FromString,
                _registered_method=True)
        self.StoreKeyValue = channel.unary_unary(
                '/chord.ChordNode/StoreKeyValue',
                request_serializer=chord__pb2.KeyValueRequest.SerializeToString,
                response_deserializer=chord__pb2.Void.FromString,
                _registered_method=True)
        self.GetKeyValues = channel.unary_unary(
                '/chord.ChordNode/GetKeyValues',
                request_serializer=chord__pb2.KeyRequest.SerializeToString,
                response_deserializer=chord__pb2.KeyValueResponse.FromString,
                _registered_method=True)
        self.UpdateSuccessor = channel.unary_unary(
                '/chord.ChordNode/UpdateSuccessor',
                request_serializer=chord__pb2.NodeInfo.SerializeToString,
                response_deserializer=chord__pb2.Void.FromString,
                _registered_method=True)
        self.UpdatePredecessor = channel.unary_unary(
                '/chord.ChordNode/UpdatePredecessor',
                request_serializer=chord__pb2.NodeInfo.SerializeToString,
                response_deserializer=chord__pb2.Void.FromString,
                _registered_method=True)


class ChordNodeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FindSuccessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPredecessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSuccessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Notify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferKeys(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKeys(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreKeyValue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKeyValues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSuccessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePredecessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChordNodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FindSuccessor': grpc.unary_unary_rpc_method_handler(
                    servicer.FindSuccessor,
                    request_deserializer=chord__pb2.FindSuccessorRequest.FromString,
                    response_serializer=chord__pb2.FindSuccessorResponse.SerializeToString,
            ),
            'GetPredecessor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPredecessor,
                    request_deserializer=chord__pb2.Void.FromString,
                    response_serializer=chord__pb2.GetPredecessorResponse.SerializeToString,
            ),
            'GetSuccessor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSuccessor,
                    request_deserializer=chord__pb2.Void.FromString,
                    response_serializer=chord__pb2.GetSuccessorResponse.SerializeToString,
            ),
            'Notify': grpc.unary_unary_rpc_method_handler(
                    servicer.Notify,
                    request_deserializer=chord__pb2.NotifyRequest.FromString,
                    response_serializer=chord__pb2.Void.SerializeToString,
            ),
            'TransferKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferKeys,
                    request_deserializer=chord__pb2.TransferKeysRequest.FromString,
                    response_serializer=chord__pb2.Void.SerializeToString,
            ),
            'GetKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKeys,
                    request_deserializer=chord__pb2.GetKeysRequest.FromString,
                    response_serializer=chord__pb2.TransferKeysResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=chord__pb2.Void.FromString,
                    response_serializer=chord__pb2.PingResponse.SerializeToString,
            ),
            'StoreKeyValue': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreKeyValue,
                    request_deserializer=chord__pb2.KeyValueRequest.FromString,
                    response_serializer=chord__pb2.Void.SerializeToString,
            ),
            'GetKeyValues': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKeyValues,
                    request_deserializer=chord__pb2.KeyRequest.FromString,
                    response_serializer=chord__pb2.KeyValueResponse.SerializeToString,
            ),
            'UpdateSuccessor': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSuccessor,
                    request_deserializer=chord__pb2.NodeInfo.FromString,
                    response_serializer=chord__pb2.Void.SerializeToString,
            ),
            'UpdatePredecessor': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePredecessor,
                    request_deserializer=chord__pb2.NodeInfo.FromString,
                    response_serializer=chord__pb2.Void.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chord.ChordNode', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('chord.ChordNode', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChordNode(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FindSuccessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.ChordNode/FindSuccessor',
            chord__pb2.FindSuccessorRequest.SerializeToString,
            chord__pb2.FindSuccessorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPredecessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.ChordNode/GetPredecessor',
            chord__pb2.Void.SerializeToString,
            chord__pb2.GetPredecessorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSuccessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.ChordNode/GetSuccessor',
            chord__pb2.Void.SerializeToString,
            chord__pb2.GetSuccessorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Notify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.ChordNode/Notify',
            chord__pb2.NotifyRequest.SerializeToString,
            chord__pb2.Void.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TransferKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.ChordNode/TransferKeys',
            chord__pb2.TransferKeysRequest.SerializeToString,
            chord__pb2.Void.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.ChordNode/GetKeys',
            chord__pb2.GetKeysRequest.SerializeToString,
            chord__pb2.TransferKeysResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.ChordNode/Ping',
            chord__pb2.Void.SerializeToString,
            chord__pb2.PingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StoreKeyValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.ChordNode/StoreKeyValue',
            chord__pb2.KeyValueRequest.SerializeToString,
            chord__pb2.Void.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetKeyValues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.ChordNode/GetKeyValues',
            chord__pb2.KeyRequest.SerializeToString,
            chord__pb2.KeyValueResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateSuccessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.ChordNode/UpdateSuccessor',
            chord__pb2.NodeInfo.SerializeToString,
            chord__pb2.Void.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdatePredecessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.ChordNode/UpdatePredecessor',
            chord__pb2.NodeInfo.SerializeToString,
            chord__pb2.Void.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
