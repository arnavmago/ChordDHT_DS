syntax = "proto3";

package chord;

message Void {}

message NodeInfo {
  int32 node_id = 1;
  string ip = 2;
  int32 port = 3;
}

message FindSuccessorRequest {
  int32 id = 1;
}

message FindSuccessorResponse {
  NodeInfo node = 1;
}

message GetPredecessorResponse {
  NodeInfo node = 1;
}

message GetSuccessorResponse {
  NodeInfo node = 1;
}

message NotifyRequest {
  NodeInfo node = 1;
}

message KeyList {
  repeated int32 values = 1;
}

message TransferKeysRequest {
  map<int32, KeyList> keys = 1;
}

message TransferKeysResponse {
  map<int32, KeyList> keys = 1;
}

message PingResponse {
  bool success = 1;
}

message KeyRequest {
  int32 key = 1;
}

message KeyValueRequest {
  int32 key = 1;
  int32 value = 2;
}

message KeyValueResponse {
  int32 key = 1;
  repeated int32 values = 2;
  bool found = 3;
}

message GetKeysRequest {
  int32 node_id = 1;
}

service ChordNode {
  rpc FindSuccessor(FindSuccessorRequest) returns (FindSuccessorResponse);
  rpc GetPredecessor(Void) returns (GetPredecessorResponse);
  rpc GetSuccessor(Void) returns (GetSuccessorResponse);
  rpc Notify(NotifyRequest) returns (Void);
  rpc TransferKeys(TransferKeysRequest) returns (Void);
  rpc GetKeys(GetKeysRequest) returns (TransferKeysResponse);
  rpc Ping(Void) returns (PingResponse);
  rpc StoreKeyValue(KeyValueRequest) returns (Void);
  rpc GetKeyValues(KeyRequest) returns (KeyValueResponse);
  rpc UpdateSuccessor(NodeInfo) returns (Void);
  rpc UpdatePredecessor(NodeInfo) returns (Void);
}